<html>
    <head>
        <title>render page</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
        <style>
            .ndisplay{
                display:none;
            }
            form{
                margin-bottom: 25px;
            }
            
        </style>
    </head>
    <body>
        <img src="data:image/png;base64, <%= user.img%>" alt="Red dot" height="100px" />
        <h1>Welcome <%=user.name%></h1>
        <div>
        <p id="email"><%=user.email%></p>
        <a href="http://localhost:3000/"><button type="button" class="btn btn-info">Logout</button></a>
        </div>
        <!--
            form to add item to the database
        -->
        <form id="addItemForm">
            <div class="form-group" >
              <label for="productName">Product Name</label>
              <input type="text" class="form-control" id="productName" name="productName" placeholder="Product Name" required>
            <div class="form-group">
              <label for="price">Price</label>
              <input type="text" class="form-control" id="price" name="price" placeholder="Enter price" required>
            </div>
            <div class="form-group">
                <label for="qunatity">Quantity</label>
                <input type="text" class="form-control" id="quantity" name="quantity" placeholder="Enter available quantity" required>
            </div>
            <div class="form-group">
                <label for="img">Item Image</label>
                <input type="file" class="form-control" id="img" name="img" placeholder="Enter available quantity" required>
            </div>
            <button type="submit" class="btn btn-primary"> Add Item</button>
        </form>
        <br><br>
            <div style="display:inline;">
                <button type="button" class="btn btn-secondary" onClick="history()">Purchase history</button>
                <button type="button" class="btn btn-secondary" onClick="viewcart()">Cart</button>

            </div>
        <h3>Product list:</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Serial no.</th>
                    <th class="ndisplay">product id</th>
                    <th>product name</th>
                    <th>price</th>
                    <th>quantity</th>
                    <th>seller</th>
                    <th>image</th>
                </tr>
            </thead>
            <tbody>
                <% for (var i = 0,temp=0; i < quotation.length; i++) { %>
                    <% if(quotation[i].IsDelete) {%>
                        <% continue %>
                    <%} else { temp++ %>
                
                    <tr>
                      <td><%=temp %></td>
                      <td class="ndisplay"><%= quotation[i]._id %></td>
                      <td><%= quotation[i].productName %></td>
                      <td><%= quotation[i].price %></td>
                      <td><%= quotation[i].quantity %></td>
                      <td><%= quotation[i].userId.name %></td>
                      <td><img src="data:image/png;base64, <%= quotation[i].img%>" alt="Red dot" height="50px" /></td>
                      <td><button class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" onClick="setform(this)">update</button></td>
                      <td><button class="btn btn-primary" onclick="itemDelete(this)">delete</button></td>
                      <td><button class="btn btn-primary" onclick="buy(this)">buy</button></td>
                      <td><button class="btn btn-primary" onClick="toCart(this)">Add to cart</button></td>
                    </tr> 
                    <%}%>   
                <% } %>
            </tbody>
        </table>
        <!-- 
            pop up form to update item
        -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="exampleModalLabel">Update item</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                    <form id="updateItemForm">
                        <div class="form-group" >
                          <label for="changeproductName">Product Name</label>
                          <input type="text" class="form-control" id="changeproductName"  name="productName" placeholder="Product Name" required>
                          </div>
                        <div class="form-group">
                          <label for="changeprice">Price</label>
                          <input type="text" class="form-control" id="changeprice" name="price" placeholder="Enter price" required>
                        </div>
                        <div class="form-group">
                            <label for="changequnatity">Quantity</label>
                            <input type="text" class="form-control" id="changequantity" name="quantity" placeholder="Enter available quantity" required>
                        </div>
                        <input type="submit" class="btn btn-primary" value="save changes">
                    </form>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
    </body>
    <script>
        var idProduct=0;
        addItemForm.onsubmit = async (e) => {
        e.preventDefault();
        let useremail=document.getElementById('email').innerHTML;
        
        let formdata= new FormData(addItemForm);
        formdata.append("email",useremail)
        let response = await fetch('/api/v1/add-item', {
        method: 'POST',
        body: formdata
        }).then((response) =>{
                return response.text()})
            .then((result) => {
                console.log(result);
            })
            .catch((error) => console.log("cannot add item", error));
            alert("Item added");
            location.reload();
        //let result = await response.json();
    };
    function buy(event){
        console.log("working");
        var myHeaders = new Headers();
        var useremail=document.getElementById('email').innerHTML;
        myHeaders.append("Content-Type", "application/json");
        quantity=+prompt("how many item do you want?",1);
        if(!quantity)
            return;
        let childs= event.parentNode.parentNode.childNodes;
        let productId=childs[3].innerHTML;
        let price=childs[7].innerHTML;
        console.log(quantity*+price)
        var raw = JSON.stringify({
        email: useremail,
        productId: productId,
        totalAmount:+quantity*+price,
        quantity:quantity
        });

        let requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            redirect: "follow",
            mode: 'cors',
            cache: 'default',
            };

            fetch("/api/v1/purchase-item", requestOptions)
            .then((response) =>{
                return response.text()})
            .then((result) => {
                console.log(result);
            })
            .catch((error) => console.log("cannot add item", error));
            location.reload();
    }
    function toCart(event)
    {
        var myHeaders = new Headers();
        let useremail=document.getElementById('email').innerHTML;
        myHeaders.append("Content-Type", "application/json");
        let childs= event.parentNode.parentNode.childNodes;
        let productId=childs[3].innerHTML;
        let price=childs[7].innerHTML;
        let quantity=prompt("how many item you want to add to cart",1);
        if(!quantity)
            return console.log("");
        var raw = JSON.stringify({
        productId: productId,
        email: useremail,
        quantity: quantity,
        price: price
        });
        let requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            redirect: "follow",
            mode: 'cors',
            cache: 'default',
            };
            
            fetch("/api/v1/add-to-cart", requestOptions)
            .then((response) =>{
                return response.text()})
            .then((result) => {
                console.log(result);
            })
            .catch((error) => console.log("cannot add item to cart", error));
 
    }
    function itemDelete(event)
    {
        var myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");
        let childs= event.parentNode.parentNode.childNodes;
        let productId=childs[3].innerHTML;

        var raw = JSON.stringify({
        productId: productId
        });

        let requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            redirect: "follow",
            mode: 'cors',
            cache: 'default',
            };

            fetch("/api/v1/delete-item", requestOptions)
            .then((response) =>{
                return response.text()})
            .then((result) => {
                console.log(result);
            })
            .catch((error) => console.log("cannot add item", error));
    }
    updateItemForm.onsubmit = async (e) => {
        e.preventDefault();
        let productId=idProduct;
        let formdata= new FormData(updateItemForm);
        formdata.append("productId",productId)
        console.log(formdata)
        let response = await fetch('/api/v1/update-item', {
        method: 'POST',
        body: formdata
        }).then((response) =>{
                return response.text()})
            .then((result) => {
                console.log(result);
            })
            .catch((error) => console.log("cannot update item", error));
            window.location.reload(true); 
    }
    function history(){
        let useremail=document.getElementById('email').innerHTML;
        let link=`http://localhost:3000/api/v1/transaction-history?email=${useremail}`;
        window.open(link,'_blank')
    }
    function viewcart(){
        let useremail=document.getElementById('email').innerHTML;
        let link=`http://localhost:3000/api/v1/render-cart?email=${useremail}`;
        window.open(link,'_blank')
    }
    function usercart(){
        let useremail=document.getElementById('email').innerHTML;
        let link=`http://localhost:3000/render-cart?email=${useremail}`;
        window.open(link,'_blank')
    }
    function setform(event)
    {
        let childs=event.parentNode.parentNode.childNodes;
        idProduct=childs[3].innerHTML;
        document.getElementById('changeproductName').value=childs[5].innerHTML;
        document.getElementById('changeprice').value=childs[7].innerHTML;
        document.getElementById('changequantity').value=childs[9].innerHTML;
    }
    </script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</html>